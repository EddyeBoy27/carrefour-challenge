version: '3'
services:
  postgres:
    image: postgres:latest
    container_name: postgres-database
    ports:
      - 5432:5432
    networks:
      - api-network
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    networks:
      - api-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    networks:
      - api-network
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - '9092:9092'
    networks:
      - api-network
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=${KAFKA_HOST}
      - KAFKA_CREATE_TOPICS=${KAFKA_TOPICS}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_CONNECT}
    depends_on:
      - zookeeper

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carrefour-challenge
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    ports:
      - 3000:3000
    networks:
      - api-network
    depends_on:
      - postgres
      - mongo
      - kafka

volumes:
  mongo_data:

networks:
  api-network:
    driver: bridge
